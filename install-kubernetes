#!/bin/bash


# UPDATE & UPGRADE

# Function to show a spinner for a given duration
show_spinner() {
    duration=$1
    spin='-\|/'
    end=$((SECONDS + duration))

    echo -n "Waiting..."
    while [ $SECONDS -lt $end ]; do
        for i in {0..3}; do
            echo -ne "\b${spin:$i:1}"  # Backspace and replace the last character
            sleep 0.1
        done
    done
    echo -ne "\b"  # Remove the spinner at the end
    echo " Done!"
}

step_1() {
    sudo apt update && sudo apt upgrade 
}

step_2() {
    sudo swapoff -a
    sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
}

step_3() {
sudo tee /etc/modules-load.d/containerd.conf <<EOF
overlay
br_netfilter
EOF
sudo modprobe overlay
sudo modprobe br_netfilter
}

step_4() {
sudo tee /etc/sysctl.d/kubernetes.conf <<EOF
    net.bridge.bridge-nf-call-ip6tables = 1
    net.bridge.bridge-nf-call-iptables = 1
    net.ipv4.ip_forward = 1
EOF
}

step_6() {
    sudo apt install -y curl gnupg2 software-properties-common \
    apt-transport-https ca-certificates
}

step_7() {
    sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/docker.gpg
    sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
}

step_8() {
    sudo apt update
    sudo apt install -y containerd.io
}

step_9() {
containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1
sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml
}

step_10() {
    sudo systemctl restart containerd
    sudo systemctl enable containerd

}

step_11() {
    sudo apt update
    sudo apt install -y apt-transport-https ca-certificates curl gpg
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

}

step_12() {
    sudo apt update
    sudo apt install -y kubelet kubeadm kubectl
    sudo apt-mark hold kubelet kubeadm kubectl
}


## Function to change subnet custom-resource.yaml file
f="custom-resources.yaml"
os="192.168.0.0/16"
ns="10.0.0.0/16"

change_subnet() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        sed -i '' "s|$os|$ns|g" "$f"
    else
        sed -i "s|$os|$ns|g" "$f"
    fi

    cidr="cat $f | grep -a cidr | awk '{print \$NF}'"
    o_cidr=$(eval "$cidr")

    if [[ "$o_cidr" == "$ns" ]]; then
        echo "Change Subnet Success!"
    else
        echo "Change Subnet Failed!"
        exit
    fi
}


set -e

### SETUP KUBERNETES CLUSTER - MASTER NODE ###
##STEP 1
echo "########## Step 1 : Updating the System ##########"
show_spinner 3
step_1
echo "Updating the System Success"
sleep 0.5

##STEP 2
echo "########## Step 2: Disable Swap ##########"
show_spinner 1
step_2
echo "Disable Swap Success"
sleep 0.5

##STEP 3
echo "########## Step 3: Add Kernel Parameters ########## "
show_spinner 1
step_3
echo "Add Kernel Parameters Success"
sleep 0.5

##STEP 4
echo "########## Step 4: Configuring Kernel Parameters"
show_spinner 1
step_4
echo "Configuring Kernel Parameters Success"
sleep 0.5

##STEP 5
echo "########## Step 5: Reload System"
show_spinner 1
sudo sysctl --system
echo "System Reloaded!"
sleep 0.5

##STEP 6
echo "########## Step 6: Install Containerd Runtime"
show_spinner 2
step_6
echo "Install Containerd Runtime Success"
sleep 0.5

##STEP 7
echo "########## Step 7: Enable Docker Repository"
show_spinner 1
step_7
echo "Docker Repository Enabled!"
sleep 0.5

##STEP 8
echo "########## Step 8: Installing Containerd ##########"
show_spinner 2
step_8
echo "Containerd Installed!"
sleep 0.5

##STEP 9
echo "########## Step 9: Configuring Containerd as cgroup ##########" 
show_spinner 1
step_9
echo "Containerd configured as cgroup!"
sleep 0.5

##STEP 10
echo "########## Step 10: Enabling the Containerd Service ##########"
show_spinner 1
step_10
echo "Containerd Service Enabled!"
sleep 0.3

##STEP 11
echo "########## Step 11: Adding Apt Repository for Kubernetes"
show_spinner 2
step_11
echo "APT Repository for Kubernetes added!!"
sleep 0.2

##STEP 12
echo "########## Step 12: Installing Kubectl, Kubeadm, & Kubelet"
show_spinner 2
step_12
echo "Kubectl, Kubeadm, & Kubelet Installed!!"
sleep 0.2

##STEP 13
echo "########## Step 13: Enabling Kubelet Service "
show_spinner 1
sudo systemctl enable --now kubelet
echo "Kubelet Service Enabled!"
sleep 0.2

## STEP 14
echo "########## Step 14 : Initialize Kubernetes Cluster"
show_spinner 2
sudo kubeadm init --pod-network-cidr=10.10.0.0/16


## Create Kube Config
echo "##### Creating Kube Config #####"
show_spinner 2
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
show_spinner 2

## INSTALING & CONFIGURE CALICO ##
echo "Installing & Configure Calico.."
show_spinner 2
echo "Install Operator on Cluster"
kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.29.0/manifests/tigera-operator.yaml
show_spinner 2
echo "Downloading custom-resources"
show_spinner 1
curl https://raw.githubusercontent.com/projectcalico/calico/v3.29.0/manifests/custom-resources.yaml -O
echo "Custom Resource Downloaded"
show_spinner 2
echo "Changing Custom Resources Subnet"
change_subnet
show_spinner 3
echo "Installing Calico"
kubectl apply -f $f 
show_spinner 3
echo "Verify Calico Installation"
kubectl get pods -n calico-system
echo "Done!!!"
